%% -- Specially formatted Latex comment tells RStudio to compile PDF with knitr
% !Rnw weave = knitr

\documentclass{article}

\usepackage{setspace, relsize} %for latex(describe()), \code
\usepackage{moreverb}          %for verbatimtabinput
\usepackage[pdftex]{lscape}    %allows tables to be landscape
\usepackage{longtable}         %allows tables to break across pages
\usepackage{url}               %puts URL in different text
%\usepackage[margin=.5in, landscape]{geometry} %resets margins
\usepackage[margin=.5in]{geometry}
\usepackage{hyperref}
\usepackage{pdfpages}

% New command to make R code stand out
\newcommand{\co}[1]{\texttt{\smaller #1}}

\title{Pediatric Delirium vs Delirium Superimposed on Dementia}
\author{Biostatistician: Jennifer Thompson; Supervisor: Rameela Chandrasekhar}
\date{\today}

\begin{document}
\maketitle
\noindent\hrulefill
\tableofcontents
\noindent\hrulefill

<<setup, include=FALSE, results='hide', cache=FALSE>>=
opts_chunk$set(echo=FALSE, warning = FALSE, message = FALSE, cache = FALSE, error = FALSE, results='hide', fig.align='center', fig.pos='!h')
options(replace.assign = TRUE, width = 90)

library(rms)
library(tidyverse)
library(viridis)
library(ggbeeswarm)

source('dsd_datamgmt.r')
source('pscam_dsd_datamgmt.r')

## Create two pediatric data sets, for infants (6m-23m) and preschoolers (2-4 years) ##
pscam.oneobs <- pscam.oneobs %>%
  mutate(age.grp = factor(ifelse(is.na(age), NA, ifelse(age < 24, 0, 1)),
                          levels = 0:1, labels = c('Infant (6-23m)', 'Preschool (24-48m)')))

pscam.long <- merge(subset(pscam.oneobs, select = c(id, age.grp)),
                    pscam.long,
                    by = 'id',
                    all.x = FALSE, all.y = TRUE)

pscam.long.infants <- pscam.long %>%
  filter(age.grp == 'Infant (6-23m)')
pscam.long.pre <- pscam.long %>%
  filter(age.grp == 'Preschool (24-48m)')

@

<<varlabels>>=
## -- Variable labels don't play nicely with the tidyverse; set after initial data management ------
label(pscam.oneobs$id) <- 'Patient ID'
label(pscam.oneobs$age) <- 'Age (months)'
label(pscam.oneobs$los) <- 'Hospital length of stay'
label(pscam.oneobs$admit.dx.0) <- 'Admission diagnosis: ARDS'
label(pscam.oneobs$admit.dx.1) <- 'Admission diagnosis: Airway protection'
label(pscam.oneobs$admit.dx.2) <- 'Admission diagnosis: Altered mental status'
label(pscam.oneobs$admit.dx.3) <- 'Admission diagnosis: Brain mass'
label(pscam.oneobs$admit.dx.4) <- 'Admission diagnosis: Cardiogenic shock'
label(pscam.oneobs$admit.dx.5) <- 'Admission diagnosis: Congenital heart disease'
label(pscam.oneobs$admit.dx.6) <- 'Admission diagnosis: Electrolyte disturbance'
label(pscam.oneobs$admit.dx.7) <- 'Admission diagnosis: Encephalities/meningitis'
label(pscam.oneobs$admit.dx.8) <- 'Admission diagnosis: Endocrine abnormality'
label(pscam.oneobs$admit.dx.9) <- 'Admission diagnosis: Hepatic failure'
label(pscam.oneobs$admit.dx.10) <- 'Admission diagnosis: Hydrocephalus'
label(pscam.oneobs$admit.dx.11) <- 'Admission diagnosis: Ingestion/poisoning'
label(pscam.oneobs$admit.dx.12) <- 'Admission diagnosis: Intracranial hemorrhage'
label(pscam.oneobs$admit.dx.13) <- 'Admission diagnosis: Oncologic disease'
label(pscam.oneobs$admit.dx.14) <- 'Admission diagnosis: Pneumonia'
label(pscam.oneobs$admit.dx.15) <- 'Admission diagnosis: Sepsis/septic shock'
label(pscam.oneobs$admit.dx.16) <- 'Admission diagnosis: Status asthmaticus'
label(pscam.oneobs$admit.dx.17) <- 'Admission diagnosis: Status epilepticus'
label(pscam.oneobs$admit.dx.18) <- 'Admission diagnosis: Trauma'
label(pscam.oneobs$admit.dx.19) <- 'Admission diagnosis: Traumatic brain injury'
label(pscam.oneobs$admit.dx.20) <- 'Admission diagnosis: Other'
label(pscam.oneobs$prism.score) <- 'PRISM score'
label(pscam.oneobs$prism.cat) <- 'PRISM category'
label(pscam.oneobs$dc.status) <- 'Status at discharge'
label(pscam.oneobs$del.asmts) <- 'Number of assessments with delirium'
label(pscam.oneobs$del.asmts.hypo) <- 'Number of hypoactive delirium assessments'
label(pscam.oneobs$del.asmts.hyper) <- 'Number of hyperactive delirium assessments'
label(pscam.oneobs$del.asmts.rass0) <- 'Number of delirium assessments where RASS = 0'

label(pscam.long$id) <- 'Patient ID'
label(pscam.long$day) <- 'Study day'
label(pscam.long$ref.delirium) <- 'Delirious per reference rater'
label(pscam.long$del.type) <- 'Delirium subtype'
label(pscam.long$focus.1) <- 'Focus, form 1'
label(pscam.long$sustain.1) <- 'Sustain attention, form 1'
label(pscam.long$screen.1) <- 'Extraneous stimuli, form 1'
label(pscam.long$attention.2) <- 'Focus, form 2'
label(pscam.long$sustained.2) <- 'Sustain attention, form 2'
label(pscam.long$stimuli.2) <- 'Extraneous stimuli, form 2'
label(pscam.long$shift.1) <- 'Shift attention, form 1'
label(pscam.long$shift.2) <- 'Shift attention, form 2'
label(pscam.long$orient.person.1) <- 'Orientation to person, form 1'
label(pscam.long$orient.place.1) <- 'Orientation to place, form 1'
label(pscam.long$orient.time.1) <- 'Orientation to time, form 1'
label(pscam.long$orient.situation.1) <- 'Orientation to situation, form 1'
label(pscam.long$consistentpref.2) <- 'Consistent preference, form 2'
label(pscam.long$orient.person.2) <- 'Orientation to person, form 2'
label(pscam.long$orient.place.2) <- 'Orientation to place, form 2'
label(pscam.long$conscious.1) <- 'Consciousness, form 1'
label(pscam.long$conscious.2) <- 'Consciousness, form 2'
label(pscam.long$interest.1) <- 'Level of interest, form 1'
label(pscam.long$inappropriate.1) <- 'Inappropriate affect, form 1'
label(pscam.long$speech.latency.1) <- 'Speech: latency, form 1'
label(pscam.long$speech.amount.1) <- 'Speech: amount, form 1'
label(pscam.long$spontaneity.1) <- 'Spontaneity, form 1'
label(pscam.long$interact.2) <- 'Interaction, form 2'
label(pscam.long$socsmile.2) <- 'Social smile, form 2'
label(pscam.long$peek.2) <- 'Object permanence, form 2'
label(pscam.long$inappropriate.2) <- 'Inappropriate affect, form 2'
label(pscam.long$speech.amount.2) <- 'Speech: amount, form 2'
label(pscam.long$spontaneity.2) <- 'Spontaneity, form 2'
label(pscam.long$speech.latency.2) <- 'Speech: latency, form 2'
label(pscam.long$lethargy.1) <- 'Lethargy, form 1'
label(pscam.long$lethargy.2) <- 'Lethargy, form 2'
label(pscam.long$thought.1) <- 'Thought blocking, form 1'
label(pscam.long$receptive.1) <- 'Receptive language, form 1'
label(pscam.long$speech.change.2) <- 'Speech: change from baseline, form 2'
label(pscam.long$receptive.2) <- 'Receptive language, form 2'
label(pscam.long$mentalstate.1) <- 'Acute change in mental state, form 1'
label(pscam.long$mentalpattern.1) <- 'Pattern of mental status, form 1'
label(pscam.long$naps.1) <- 'Naps, form 1'
label(pscam.long$daynight.1) <- 'Day/night reversal, form 1'
label(pscam.long$nocturnal.1) <- 'Nocturnal disturbance, form 1'
label(pscam.long$mentalstate.2) <- 'Acute change in mental state, form 2'
label(pscam.long$mentalpattern.2) <- 'Pattern of mental status, form 2'
label(pscam.long$naps.2) <- 'Naps, form 2'
label(pscam.long$daynight.2) <- 'Day/night reversal, form 2'
label(pscam.long$nocturnal.2) <- 'Nocturnal disturbance, form 2'
label(pscam.long$agitated.1) <- 'Agitation, form 1'
label(pscam.long$euphoria.1) <- 'Euphoria, form 1'
label(pscam.long$agitated.2) <- 'Agitation, form 2'
label(pscam.long$energy.2) <- 'Euphoria, form 2'
label(pscam.long$auditory.1) <- 'Auditory hallucinations, form 1'
label(pscam.long$visual.1) <- 'Visual hallucinations, form 1'
label(pscam.long$gust.1) <- 'Gustatory hallucinations, form 1'
label(pscam.long$hyperacusis.1) <- 'Hyperacusis, form 1'
label(pscam.long$disturbance.1) <- 'Perception of size/shape, form 1'
label(pscam.long$hallucinations.2) <- 'Hallucinations, form 2'
label(pscam.long$atypresp.2) <- 'Atypical response, form 2'
label(pscam.long$hyperacusis.2) <- 'Hyperacusis, form 2'
label(pscam.long$soothe.2) <- 'Unable to soothe, form 2'
label(pscam.long$anxiety.1) <- 'Irritability, form 1'
label(pscam.long$anxiety.2) <- 'Irritability, form 2'
label(pscam.long$sustained.attn) <- 'Sustained attention'
label(pscam.long$shift.attn) <- 'Shfiting attention'
label(pscam.long$attention) <- 'Attention'
label(pscam.long$orientation) <- 'Orientation'
label(pscam.long$consciousness) <- 'Consciousness'
label(pscam.long$apathy) <- 'Apathy'
label(pscam.long$hypokinesia) <- 'Hypokinesia/lethargy'
label(pscam.long$incoherence) <- 'Incoherence'
label(pscam.long$fluctuation) <- 'Fluctuations in functioning'
label(pscam.long$restlessness) <- 'Restlessness'
label(pscam.long$delusions) <- 'Delusions'
label(pscam.long$hallucination) <- 'Hallucinations'
label(pscam.long$anxiety) <- 'Anxiety'
label(pscam.long$inconsolability) <- 'Inconsolability'

label(dsd.long$id) <- 'Patient ID'
label(dsd.long$day) <- 'Study day'
label(dsd.long$dom.1) <- 'DOM 1: Sustained attention'
label(dsd.long$dom.2) <- 'DOM 2: Shifting attention'
label(dsd.long$dom.3) <- 'DOM 3: Orientation'
label(dsd.long$dom.4) <- 'DOM 4: Consciousness'
label(dsd.long$dom.5) <- 'DOM 5: Apathy'
label(dsd.long$dom.6) <- 'DOM 6: Hypokinesia/psychomotor retardation'
label(dsd.long$dom.7) <- 'DOM 7: Incoherence'
label(dsd.long$dom.8) <- 'DOM 8: Fluctuation in functioning'
label(dsd.long$dom.9) <- 'DOM 9: Restlessness'
label(dsd.long$dom.10) <- 'DOM 10: Delusions'
label(dsd.long$dom.11) <- 'DOM 11: Hallucinations'
label(dsd.long$dom.12) <- 'DOM 12: Anxiety/fear'
label(dsd.long$rass) <- 'RASS'
label(dsd.long$dom.tot) <- 'Total DOM score'
label(dsd.long$sustained.attn) <- 'Sustained attention'
label(dsd.long$shift.attn) <- 'Shfiting attention'
label(dsd.long$attention) <- 'Attention'
label(dsd.long$orientation) <- 'Orientation'
label(dsd.long$consciousness) <- 'Consciousness'
label(dsd.long$apathy) <- 'Apathy'
label(dsd.long$hypokinesia) <- 'Hypokinesia/lethargy'
label(dsd.long$incoherence) <- 'Incoherence'
label(dsd.long$fluctuation) <- 'Fluctuations in functioning'
label(dsd.long$restlessness) <- 'Restlessness'
label(dsd.long$delusions) <- 'Delusions'
label(dsd.long$hallucination) <- 'Hallucinations'
label(dsd.long$anxiety) <- 'Anxiety'
label(dsd.long$inconsolability) <- 'Inconsolability'
label(dsd.long$del.type) <- 'Delirium subtype'

label(dsd.oneobs$id) <- 'Patient ID'
label(dsd.oneobs$age) <- 'Age'
label(dsd.oneobs$los) <- 'Length of stay (days)'
label(dsd.oneobs$iqcode) <- 'IQCODE'
label(dsd.oneobs$cdr) <- 'CDR'
label(dsd.oneobs$bi.pre) <- 'Barthel Index, pre-admission'
label(dsd.oneobs$bi.adm) <- 'Barthel Index, admission'
label(dsd.oneobs$bi.dc) <- 'Barthel Index, discharge'
label(dsd.oneobs$iadl.tot) <- 'IADL, admission'
label(dsd.oneobs$tinetti.adm) <- 'Tinetti score, admission'
label(dsd.oneobs$tinetti.dc) <- 'Tinetti score, discharge'
label(dsd.oneobs$ep.hypo) <- 'Episodes of hypoactive delirium'
label(dsd.oneobs$ep.hyper) <- 'Episodes of hyperactive delirium'
label(dsd.oneobs$type.dem) <- 'Type of dementia'
label(dsd.oneobs$dc.loc) <- 'Discharge setting'
label(dsd.oneobs$dom.asmts) <- 'Number of DOM assessments'
label(dsd.oneobs$dom.max) <- 'Maximum DOM score during study'
label(dsd.oneobs$dom.asmts.hypo) <- 'Number of hypoactive DOM assessments'
label(dsd.oneobs$dom.asmts.hyper) <- 'Number of hyperactive DOM assessments'
label(dsd.oneobs$dom.asmts.rass0) <- 'Number of DOM assessments with RASS = 0'

@

We compared the prevalence of delirium symptoms among delirious pediatric patients (divided into
infants and preschoolers) and geriatric patients with delirium superimposed on dementia (DSD).

\section{Cohort Descriptions}
\subsection{Pediatric Patients}
We included patients enrolled in the PsCAM validation study who had at least one instance of
confirmed delirium as assessed by the psychiatric reference rater. Table \ref{table:pedsdesc}
describes baseline and in-hospital characteristics for these patients.

<<pedsdesc>>=
pedsdesc.left <- paste(c('age', paste0('admit.dx.', 0:20, collapse = ' + '), 'prism.score',
                         'prism.cat', 'del.asmts', 'del.asmts.hypo', 'del.asmts.hyper',
                         'del.asmts.rass0', 'los', 'dc.status'),
                       collapse = ' + ')

pedsdesc.table <- summaryM(as.formula(paste(pedsdesc.left, ' ~ age.grp')),
                           overall = TRUE,
                           data = pscam.oneobs)
@

<<printpedsdesc, results='asis'>>=
latex(pedsdesc.table, file = '',
      label = 'table:pedsdesc',
      caption = 'Baseline and In-Hospital Characteristics of Pediatric Patients',
      where = '!h',
      size = 'small',
      prmsd = TRUE,
      digits = 2,
      what = '%',
      npct = 'both',
      npct.size = 'footnotesize')
@

\clearpage
\subsection{Geriatric Patients}
We included geriatric patients with dementia (CDR \textgreater 1) and at least
one delirium assessment. Table \ref{table:gerdesc} describes baseline and
in-hospital characteristics for these patients.

<<gerdesc>>=
# gerdesc.left <- paste(c('age', paste0('admit.dx.', 0:20, collapse = ' + '), 'prism.score',
#                         'prism.cat', 'del.asmts', 'dom.asmts.hypo', 'dom.asmts.hyper',
#                         'dom.asmts.rass0', 'los', 'dc.status'),
#                        collapse = ' + ')

gerdesc.table <- summaryM(age + iqcode + cdr + iadl.tot + bi.pre + bi.adm + bi.dc + tinetti.adm +
                            tinetti.dc + type.dem + dom.asmts + dom.asmts.hypo + dom.asmts.hyper +
                            dom.asmts.rass0 + dc.loc ~ 1,
                           data = dsd.oneobs)
@

<<printgerdesc, results='asis'>>=
latex(gerdesc.table, file = '',
      label = 'table:gerdesc',
      caption = 'Baseline and In-Hospital Characteristics of DSD Patients',
      where = '!h',
#       exclude1 = FALSE,
      long = FALSE,
      size = "small",
      prmsd = TRUE,
      digits = 2,
      what = '%',
      npct = 'both',
      npct.size = 'footnotesize',
      colheads = c('N', 'All Patients'))
@

<<createmaintable>>=
del.symptoms <- Cs(attention, orientation, consciousness, apathy, hypokinesia,
                   incoherence, fluctuation, restlessness, delusions,
                   hallucination, anxiety, inconsolability)

calc.pct <- function(varname, dataset){
  ## Get number of all delirium assessments, number of assessments with feature assessed
  n.asmts.all <- nrow(dataset)
  n.asmts.nonmiss <- sum(!is.na(dataset[,varname]))
  
  ## Number of assessments with abnormal feature
  n.abnormal <- ifelse(n.asmts.nonmiss == 0, NA, sum(dataset[,varname], na.rm = TRUE))
  
  ## Calculate percentages
  pct.abnormal.all <- round((n.abnormal / n.asmts.all)*100)
  pct.abnormal.nonmiss <- round((n.abnormal / n.asmts.nonmiss)*100)
  
  if(is.na(n.abnormal)){
    pct.string <- '\\emph{(Not applicable)}'
  } else if(n.asmts.all == n.asmts.nonmiss){
    pct.string <- paste0(n.abnormal, ' (', pct.abnormal.all, '\\%)')
  } else{
    pct.string <- paste0(n.abnormal, ' (', pct.abnormal.all, '\\%; ', pct.abnormal.nonmiss, '\\%)')
  }
  
  return(list('n.abnormal' = n.abnormal,
              'pct.abnormal.all' = pct.abnormal.all,
              'pct.abnormal.nonmiss' = pct.abnormal.nonmiss,
              'pct.string' = pct.string))
}

## -- Get list of all relevant data for all symptoms -- ##
all.data <- Cs(dsd.long, pscam.long.infants, pscam.long.pre)
all.legend <- c('DSD', 'Infants (6-23m)', 'Preschoolers (24-48m)')

symptom.data.all <- lapply(all.data,
                           FUN = function(data){
                             lapply(del.symptoms, FUN = function(x){
                               calc.pct(varname = x, dataset = get(data))
                             })
                           })

## -- Create table for printing -- ##
symptom.table <- do.call(cbind,
                         lapply(symptom.data.all,
                                FUN = function(x){
                                  do.call(rbind,
                                          lapply(x, FUN = function(y){ y$pct.string }))
                                }))

colnames(symptom.table) <- c('DSD', 'Infants (6-23 months)', 'Preschoolers (24-48 months)')
rownames(symptom.table) <- capitalize(del.symptoms)

## Data for radar plot ##
create.radar <- function(symptom.data.list, ylabel, inc.ps = TRUE){
  radar.data <- 
    do.call(rbind,
            lapply(1:length(symptom.data.list),
                   FUN = function(data){
                     do.call(rbind,
                             lapply(1:length(del.symptoms),
                                    FUN = function(sympnum){
                                      data.frame(symptom = capitalize(del.symptoms[sympnum]),
                                                 pop = all.legend[data],
                                                 pct = symptom.data.list[[data]][[sympnum]]$pct.abnormal.nonmiss)
                                      }))
                     }))
  
  ## If we don't want preschoolers, remove them from radar.data (sorry, kids)
  if(!inc.ps){
    radar.data <- subset(radar.data, !(pop == "Preschoolers (24-48m)"))
    delsymp.times <- 2
  } else{
    delsymp.times <- 3
  }

  ## Sort by percent of DSD patients
  dsd.data <- subset(radar.data, pop == 'DSD')
  dsd.data <- dsd.data[order(dsd.data$pct, na.last = FALSE, decreasing = FALSE),]
  dsd.data$sortvar <- 1:nrow(dsd.data)
  radar.data <- merge(radar.data, subset(dsd.data, select = c(symptom, sortvar)), by = 'symptom')
  radar.data <- radar.data[order(radar.data$sortvar),]
  radar.data$symptom.f <- factor(radar.data$symptom, levels=unique(as.character(radar.data$symptom)))
#   radar.data$symptom <- ifelse(radar.data$symptom %in% c('Fluctuation', 'Restlessness'),
#                                paste0('\n', as.character(radar.data$symptom)),
#                                as.character(radar.data$symptom))
  radar.data$xval <- 1
  radar.data$usex <- rep(1:length(del.symptoms), each = delsymp.times)
  
  dot.plot <-
  ggplot(aes(x = usex, y = pct, colour = pop), data = radar.data) +
    geom_vline(xintercept = 1:length(del.symptoms), colour = 'grey75', alpha = 0.7, size = 20) +
    geom_hline(yintercept = seq(25, 100, 25), colour = 'white', size = 0.5) +
    geom_vline(xintercept = c(1:length(del.symptoms)), colour = 'grey90', size = 0.1) +
    geom_beeswarm(size = 3, alpha = 0.7, priority = 'ascending') +
    scale_color_viridis(name = '', discrete = TRUE) +
    scale_x_continuous(name = '',
                       limits = c(1, length(del.symptoms) + 0.25),
                       breaks = 1:length(unique(radar.data$symptom.f)),
                       labels = unique(radar.data$symptom.f)) +
    scale_y_continuous(name = ylabel,
                       breaks = seq(0, 100, 25), labels = paste0(seq(0, 100, 25), '%')) +
    theme_minimal() +
    theme(axis.title.x = element_blank(),
          axis.text.x = element_text(angle = 30, vjust = 1, hjust = 1),
          axis.text.y = element_text(hjust = 1),
          panel.grid.major = element_blank(),
          panel.grid.minor = element_blank(),
          legend.position = 'bottom',
          legend.key = element_rect(fill = 'grey80', colour = NA))

  radar.plot <- ggplot(aes(x = symptom.f, y = pct, group = pop, colour = pop), data = radar.data) +
    geom_line() +
    coord_polar(theta = 'x', start = (pi / 12)) +
    theme(axis.text.x = element_text(face = 'bold', vjust = 1),
          legend.position = 'bottom') +
    scale_colour_discrete(name = '') +
    scale_y_continuous(name = ylabel) +
    scale_x_discrete(name = '')

  axis.label.data <- data.frame(axis.labs = seq(0, 100, 25))
  axis.label.data$xval <- 1.5
  
  dot.radar <- ggplot(aes(x = symptom.f, y = pct, group = pop, colour = pop), data = radar.data) +
    geom_hline(yintercept = seq(0, 100, 25), colour = 'white') +
    geom_vline(xintercept = 1:length(del.symptoms), colour = 'white') +
    annotate('text', label = seq(0, 100, 25), x = rep(7.5, 5), y = seq(0, 100, 25),
             colour = 'grey60', size = 3.5, vjust = 0) +
    geom_point(size = 3, alpha = 0.7) +
    coord_polar(theta = 'x', start = (9*pi / 12)) +
    theme(axis.line.x = element_line(colour = 'white'),
          axis.text.x = element_text(face = 'bold', size = 9),
          axis.text.y = element_blank(),
          axis.ticks.y = element_blank(),
          panel.grid = element_blank(),
          #panel.grid.major.y = element_blank(),
          legend.position = 'bottom') +
    scale_colour_discrete(name = '') +
    scale_size(name = '', range = c(2, 5), guide = FALSE) +
    scale_y_continuous(name = ylabel, limits = c(-5, 100), breaks = seq(0, 100, 25)) +
    scale_x_discrete(name = '') #, labels = unique(radar.data$symptom))

  return(list('radar.data' = radar.data,
              'dot.plot' = dot.plot,
              'radar.plot' = radar.plot,
              'dot.radar' = dot.radar))
}

radar.all <- create.radar(symptom.data.all,
                          ylabel = 'Delirious Assessments where\nSymptom Assessed and Present')
@

\clearpage
\section{Delirium Symptoms, All Assessments}
We examined the prevalence of \Sexpr{length(del.symptoms)} specific symptoms of delirium in both DSD
and pediatric delirium, separately for infants and preschoolers. Table \ref{table:symptomsall} shows
the prevalence for each symptom in each population, as ``number of assessments with this symptom
(percentage of all delirious assessments; percentage of all delirious assessments where this symptom
was evaluated)." Two percentages are sometimes required because not all symptoms were able to be
evaluated at all assessments, especially in the pediatric population.

<<printsymptomsall, results='asis'>>=
latex(symptom.table, file = '',
      caption = 'Delirium Symptoms among All Delirious Assessments',
      insert.bottom = 'Cells include number of assessments (percent of all delirious assessments; percent of assessments with this symptom assessed). Where only one percentage is shown, all assessments had symptom assessed.',
      label = 'table:symptomsall',
      title = '',
      extracolheads = paste('N =', c(nrow(dsd.long), nrow(pscam.long.infants), nrow(pscam.long.pre))),
      col.just = rep('r', ncol(symptom.table)),
      where = '!h')
@

\begin{landscape}
<<symptomsallfig, fig.cap='Dot Chart, Delirium Symptoms among All Assessments by Population', fig.height=6, fig.width=10>>=
radar.all$dot.plot
# radar.all$radar.plot
# radar.all$dot.radar

@
\end{landscape}

% \clearpage
\section{Delirium Symptoms by Delirium Subtype}
We examined the prevalence of each delirium symptom separately for hypoactive and hyperactive delirium. These delirium subtypes were indicated by the reference raters in the pediatric assessments, and determined via the RASS in the DSD assessments (RASS $<$ 0 = hypoactive; RASS $>$ 0 = hyperactive). Tables \ref{table:pedssubtypes} and \ref{table:gersubtypes} describe the prevalence of each subtype in both populations.

<<descsubtypes>>=
ped.subtypes <- summaryM(del.type ~ age.grp, overall = TRUE, data = pscam.long)
ger.subtypes <- summaryM(del.type ~ 1, data = dsd.long)
@

<<printdescsubtypes, results='asis'>>=
latex(ped.subtypes, file = '',
      caption = 'Delirium Subtypes, Pediatric Patients',
      where = '!h',
      label = 'table:pedssubtypes',
      exclude1 = FALSE,
      what = '%',
      npct = 'both',
      npct.size = 'footnotesize',
      long = TRUE)

latex(ger.subtypes, file = '',
      caption = 'Delirium Subtypes, Geriatric Patients',
      where = '!h',
      label = 'table:gersubtypes',
      colheads = 'All Assessments',
      exclude1 = FALSE,
      what = '%',
      npct = 'both',
      npct.size = 'footnotesize',
      long = TRUE)
@

\clearpage
Tables \ref{table:symptomshypo} and \ref{table:symptomshyper} present the prevalence of delirium symptoms among hypoactive and hyperactive delirium assessments, respectively.

<<subtypesymptoms>>=
## Create subsets of data sets to use in lapply() ##
dsd.long.hypo <- subset(dsd.long, del.type == 'Hypoactive')
dsd.long.hyper <- subset(dsd.long, del.type == 'Hyperactive')
pscam.long.infants.hypo <- subset(pscam.long.infants, del.type == 'Hypoactive')
pscam.long.infants.hyper <- subset(pscam.long.infants, del.type == 'Hyperactive')
pscam.long.pre.hypo <- subset(pscam.long.pre, del.type == 'Hypoactive')
pscam.long.pre.hyper <- subset(pscam.long.pre, del.type == 'Hyperactive')

## Create hypoactive table ##
hypo.data <- Cs(dsd.long.hypo, pscam.long.infants.hypo, pscam.long.pre.hypo)

symptom.data.hypo <- lapply(hypo.data,
                            FUN = function(data){
                              lapply(del.symptoms, FUN = function(x){
                                calc.pct(varname = x, dataset = get(data))
                                })
                              })

## -- Create table for printing -- ##
symptom.table.hypo <- do.call(cbind,
                              lapply(symptom.data.hypo,
                                     FUN = function(x){
                                       do.call(rbind,
                                               lapply(x, FUN = function(y){ y$pct.string }))
                                       }))

colnames(symptom.table.hypo) <- c('DSD', 'Infants (6-23 months)', 'Preschoolers (24-48 months)')
rownames(symptom.table.hypo) <- capitalize(del.symptoms)

radar.hypo <-
  create.radar(symptom.data.hypo,
               ylabel = 'Percent of Hypoactively Delirious Assessments where Symptom Assessed and Present')

## Create hyperactive table ##
hyper.data <- Cs(dsd.long.hyper, pscam.long.infants.hyper, pscam.long.pre.hyper)

symptom.data.hyper <- lapply(hyper.data,
                             FUN = function(data){
                               lapply(del.symptoms, FUN = function(x){
                                 calc.pct(varname = x, dataset = get(data))
                                 })
                               })

## -- Create table for printing -- ##
symptom.table.hyper <- do.call(cbind,
                               lapply(symptom.data.hyper,
                                      FUN = function(x){
                                        do.call(rbind,
                                                lapply(x, FUN = function(y){ y$pct.string }))
                                        }))

colnames(symptom.table.hyper) <- c('DSD', 'Infants (6-23 months)', 'Preschoolers (24-48 months)')
rownames(symptom.table.hyper) <- capitalize(del.symptoms)

radar.hyper <-
  create.radar(symptom.data.hyper,
               ylabel = 'Percent of Hyperactively Delirious Assessments where Symptom Assessed and Present',
               inc.ps = FALSE)

@

<<printsymptomshypo, results='asis'>>=
latex(symptom.table.hypo, file = '',
      caption = 'Delirium Symptoms among Hypoactive Delirious Assessments',
      insert.bottom = 'Cells include number of assessments (percent of all hypoactive assessments; percent of hypoactive assessments with this symptom assessed). Where only one percentage is shown, all hypoactive assessments had symptom assessed.',
      label = 'table:symptomshypo',
      title = '',
      extracolheads = paste('N =',
                            c(nrow(dsd.long.hypo),
                              nrow(pscam.long.infants.hypo),
                              nrow(pscam.long.pre.hypo))),
      col.just = rep('r', ncol(symptom.table.hypo)),
      where = '!h')
@

\begin{landscape}
<<symptomshypofig, results='asis', fig.cap='Dot Chart, Delirium Symptoms among Hypoactively Delirious Assessments by Population', fig.height=8, fig.width=11>>=
radar.hypo$dot.plot
@
\end{landscape}

% \clearpage
<<printsymptomshyper, results='asis'>>=
latex(symptom.table.hyper, file = '',
      caption = 'Delirium Symptoms among Hyperactive Delirious Assessments',
      insert.bottom = 'Cells include number of assessments (percent of all hyperactive assessments; percent of hyperactive assessments with this symptom assessed). Where only one percentage is shown, all hyperactive assessments had symptom assessed.',
      label = 'table:symptomshyper',
      title = '',
      extracolheads = paste('N =',
                            c(nrow(dsd.long.hyper),
                              nrow(pscam.long.infants.hyper),
                              nrow(pscam.long.pre.hyper))),
      col.just = rep('r', ncol(symptom.table.hyper)),
      where = '!h')
@

\begin{landscape}
<<symptomshyperfig, results='asis', fig.cap='Dot Chart, Delirium Symptoms among Hyperactively Delirious Assessments by Population', fig.height=8, fig.width=11>>=
radar.hyper$dot.plot
@
\end{landscape}

\section{Cluster Analysis}

To see if pediatric and geriatric populations had similar clusters of symptoms when assessed for
delirium/dementia, we performed a cluster analysis - a formal way of seeing if particular sets of
symptoms are likely to be observed together, and in our case, if these sets were similar in the
pediatric vs the geriatric populations. For each population, we cut a hierarchical cluster tree; to
avoid issues of correlation within patients, we took only the first day from each patient. Once we
determined clusters for each population, we used Cohen's kappa to assess ``agreement" between
clustering of the two populations.

Unfortunately, we had to exclude several symptoms from these analyses: inconsolability and delusions
were excluded because they were not measured in both geriatric and pediatric patients; attention, orientation, and fluctuation were excluded because there was no variability in one or both populations when restricted to the first observation per patient (i.e., all geriatric patient-days recorded
attention - there was no day without that symptom observed). Cluster analyses are performed on the
remaining seven symptoms.

Technical details: Dendrograms are produced using the \texttt{ClustOfVar} package; additional
cluster analyses are produced using the \texttt{ClustVarLV} package.

<<cluster_datamgmt>>=
library(ClustOfVar) ## cluster trees
library(ClustVarLV) ## cluster analysis
# library(ggraph)
library(psych) ## Cohen's kappa

## -- For cluster analysis, want two data sets (peds, DSD) with one record per patient (only ------- ## -- first record from each), one column per symptom ----------------------------------------------
## Remove inconsolability, delusions because they weren't assessed in both populations.
## Remove others because every day 1 assessment in geriatric patients showed inattention and
##  orientation issues; every day 1 assessment in pediatric patients showed fluctuation symptoms.
##  Including these variables results in errors with hclustvar().
common.symptoms <- del.symptoms[!(del.symptoms %in% c('inconsolability', 'delusions', 'attention',
                                                      'orientation', 'fluctuation'))]

make.factor <- function(x){
  factor(as.numeric(x), levels = 0:1, labels = c('No', 'Yes'))
}

dsd.clusterdata <- dsd.long %>%
  arrange(id, day) %>%
  group_by(id) %>%
  filter(row_number() == 1) %>%
  ungroup() %>%
  select(one_of(common.symptoms)) %>%
  mutate(consciousness = make.factor(consciousness),
         apathy = make.factor(apathy),
         hypokinesia = make.factor(hypokinesia),
         incoherence = make.factor(incoherence),
         restlessness = make.factor(restlessness),
         hallucination = make.factor(hallucination),
         anxiety = make.factor(anxiety)) %>%
  data.frame()

pscam.clusterdata <- pscam.long %>%
  arrange(id, day) %>%
  group_by(id) %>%
  filter(row_number() == 1) %>%
  ungroup() %>%
  select(one_of(common.symptoms)) %>%
  mutate(consciousness = make.factor(consciousness),
         apathy = make.factor(apathy),
         hypokinesia = make.factor(hypokinesia),
         incoherence = make.factor(incoherence),
         restlessness = make.factor(restlessness),
         hallucination = make.factor(hallucination),
         anxiety = make.factor(anxiety)) %>%
  data.frame()

## -- Cluster analysis for each population ---------------------------------------------------------
dsd.tree <- hclustvar(X.quali = dsd.clusterdata)
pscam.tree <- hclustvar(X.quali = pscam.clusterdata)

## Using ClustOfVar
# dsd.clusters <- cutreevar(dsd.tree, k = 4, matsim = TRUE)
# pscam.clusters <- cutreevar(pscam.tree, k = 4, matsim = TRUE)

## Using ClustVarLV
## Run hierarchical clustering on both data sets
dsd.resclv <- CLV(stand_quali(dsd.clusterdata),
                  method = "directional",
                  sX = FALSE)
pscam.resclv <- CLV(stand_quali(pscam.clusterdata),
                    method = "directional",
                    sX = FALSE)

## Extract proportion of each dataset accounted for by group latent variables for 2-4 clusters;
## we'll use the number of clusters with the highest proportion
n.k <- 2:4
dsd.proptot <- map_dbl(n.k, ~summary(dsd.resclv, K = .)$prop_tot)
pscam.proptot <- map_dbl(n.k, ~summary(pscam.resclv, K = .)$prop_tot)

dsd.nk <- n.k[dsd.proptot == max(dsd.proptot)]
pscam.nk <- n.k[pscam.proptot == max(pscam.proptot)]

## Fortunately, both datasets resulted in the same number of clusters

dsd.clustersummary <- summary(dsd.resclv, K = dsd.nk)
pscam.clustersummary <- summary(pscam.resclv, K = dsd.nk)

## Which cluster is each symptom in?
## Function to extract symptom names, cluster numbers from summary.clv objects
clv.df <- function(x){
  nk <- length(x$groups)
  tmp <- map_df(1:nk, ~data.frame(symptom = rownames(x$groups[[.]]), cluster = .)) %>%
    mutate(symptom = gsub('\\..*$', '', symptom)) %>%
    unique()
  tmp
}

dsd.clusters <- clv.df(dsd.clustersummary)
pscam.clusters <- clv.df(pscam.clustersummary)
clusters.data <- merge(dsd.clusters, pscam.clusters, by = 'symptom')
names(clusters.data) <- c('Symptom', 'Geriatric', 'Pediatric')

symptom.k <- cohen.kappa(clusters.data[,c('Geriatric', 'Pediatric')])

@

\subsection{Dendrograms of Symptoms by Population}
Symptoms on the same ``tree" are observed together more often.

<<cluster_trees, results = 'asis', fig.height = 3.75, fig.width = 8>>=
par(cex = 0.75)
plot(dsd.tree, sub = 'Geriatric Patients')
plot(pscam.tree, sub = 'Pediatric Patients')

@

\subsection{Clusters by Population and Between-Group Agreement}
For each population, we looked at the proportion of variability explained by clustering the variables when forcing two, three, and four clusters. In both populations, \Sexpr{dsd.nk} clusters
produced the highest proportion of variance explained: \Sexpr{round(max(dsd.proptot)*100)}\% among geriatric patients, and \Sexpr{round(max(pscam.proptot)*100)}\% among pediatric patients.

If the values in the two columns below are the same, this indicates that the symptom fell into the
same cluster in both populations.

<<cluster_kappa, results = 'asis'>>=
# cluster.matrix <- cbind(dsd.clusters$cluster, pscam.clusters$cluster)
# rownames(cluster.matrix) <- common.symptoms
# colnames(cluster.matrix) <- c('Geriatric', 'Pediatric')
# cluster.matrix

# cohen.kappa(cbind(dsd.clusters$cluster, pscam.clusters$cluster))

latex(clusters.data, file = '',
      rowname = NULL,
      title = '',
      where = '!h',
      caption = 'Symptom Clusters by Population')

@

Unfortunately, we saw very low agreement between the two populations in terms of where symptoms
clustered: only consciousness was in the same cluster in both populations, and when we performed a
Cohen's kappa on the above, the result is only \Sexpr{round(symptom.k$kappa, 2)} (95\% CI, [\Sexpr{round(symptom.k$confid[1, 'lower'], 2)}, \Sexpr{round(symptom.k$confid[1, 'upper'], 2)}]).

%% -- Heatmap was deemed less helpful --------------------------------------------------------------
% <<vis_heatmap>>=
% ## -- Create dataset for heatmaps ------------------------------------------------------------------
% ## For each symptom,
% ## - how many patients had it
% ## - how many patients had each other symptom
% ## - what % of patients with that symptom had each other symptom
% ## - what cluster is it in for each population, if applicable
% ## - population
% 
% days_with_both <- function(symp1, symp2, df){
%   data.frame(symp1 = symp1,
%              symp2 = symp2,
%              n_days = nrow(df),
%              n_symp1 = sum(as.logical(df[,symp1]), na.rm = TRUE),
%              n_symp2 = sum(as.logical(df[,symp2]), na.rm = TRUE),
%              n_both = sum(as.logical(df[as.logical(df[, symp1]), symp2]), na.rm = TRUE))
% }
% 
% dsd.heatdata <- map2_df(sort(rep(del.symptoms, length(del.symptoms))),
%                         rep(del.symptoms, length(del.symptoms)),
%                         days_with_both,
%                         df = dsd.long) %>%
%   left_join(dsd.clusters, by = c('symp1' = 'symptom')) %>%
%   rename(cluster_symp1 = cluster) %>%
%   left_join(dsd.clusters, by = c('symp2' = 'symptom')) %>%
%   rename(cluster_symp2 = cluster) %>%
%   mutate(pop = 'Geriatric')
% 
% pscam.heatdata <- map2_df(sort(rep(del.symptoms, length(del.symptoms))),
%                           rep(del.symptoms, length(del.symptoms)),
%                           days_with_both,
%                           df = pscam.long) %>%
%   left_join(pscam.clusters, by = c('symp1' = 'symptom')) %>%
%   rename(cluster_symp1 = cluster) %>%
%   left_join(pscam.clusters, by = c('symp2' = 'symptom')) %>%
%   rename(cluster_symp2 = cluster) %>%
%   mutate(pop = 'Pediatric')
% 
% data.heatmap <- bind_rows(dsd.heatdata, pscam.heatdata) %>%
%   mutate(n_symp1 = ifelse((pop == 'Geriatric' & symp1 == 'inconsolability') |
%                             (pop == 'Pediatric' & symp1 == 'delusions'), NA,
%                           n_symp1),
%          n_symp2 = ifelse((pop == 'Geriatric' & symp2 == 'inconsolability') |
%                             (pop == 'Pediatric' & symp2 == 'delusions'), NA,
%                           n_symp2),
%          n_both = ifelse((pop == 'Geriatric' &
%                             (symp1 == 'inconsolability' | symp2 == 'inconsolability')) |
%                          (pop == 'Pediatric' & (symp1 == 'delusions' | symp2 == 'delusions')), NA,
%                          n_both),
%          pct_symp1_all = ifelse(!is.na(n_symp2), n_symp1 / n_days, NA),
%          pct_symp2_all = ifelse(!is.na(n_symp1), n_symp2 / n_days, NA),
%          pct_both_all = n_both / n_days,
%          pct_both_symp1 = ifelse((pop == 'Geriatric' &
%                                     (symp1 == 'inconsolability' | symp2 == 'inconsolability')) |
%                                  (pop == 'Pediatric' &
%                                     (symp1 %in% c('delusions') | symp2 %in% c('delusions'))), NA,
%                                  n_both / n_symp1),
%          cluster_both = factor(ifelse(is.na(pct_both_symp1), NA,
%                                ifelse(!is.na(cluster_symp1) & !is.na(cluster_symp2) &
%                                        cluster_symp1 == cluster_symp2, cluster_symp1,
%                                ifelse(!is.na(cluster_symp1), 0, -1))),
%                                levels = -1:4,
%                                labels = c('Not included in clustering',
%                                           'Symptoms in different clusters',
%                                           as.character(1:4)))) %>%
%   rename(Cluster = cluster_both,
%          PctOfAllDayswSymptom1 = pct_both_symp1,
%          Symptom1 = symp1,
%          Symptom2 = symp2,
%          PctofDayswSymptom2 = pct_both_symp1)
% 
% p <- ggplot(data = data.heatmap, aes(x = Symptom2, y = Symptom1)) +
%   facet_wrap(~ pop) +
%   geom_tile(aes(fill = pct_symp1_all, alpha = PctofDayswSymptom2)) +
%   # ## Colors by clustering
%   # scale_fill_manual(values = c('black', 'darkorange',
%   #                              viridis(option = 'viridis', n = 4))) +
%   ## Colors
%   scale_alpha(name = 'Proportion of Row\nSymptom Days\nwith Column Symptom') +
%   scale_fill_viridis(name = 'Proportion of All Days\nwith Row Symptom',
%                      option = 'viridis', direction = 1) +
%   scale_x_discrete(name = NULL) +
%   scale_y_discrete(name = NULL) +
%   theme_minimal() +
%   theme(panel.grid = element_blank(),
%         # plot.background = element_rect(fill = 'grey20'),
%         #panel.background = element_rect(fill = 'grey90'),
%         strip.text = element_text(hjust = 0, face = 'bold', size = 15),
%         axis.text.x = element_text(angle = 45, hjust = 1),
%         axis.ticks = element_blank())
% 
% p %>%
%   ggplotly(tooltip = c('y', 'x', 'fill', 'alpha'))
% 
% 
% @


<<vis_clusters>>=
library(ggraph)
library(igraph)

## -- For each unique pair of symptoms, what N/proportion of patient-days had both? ----------------
## Data frame of all unique symptom pairs, except those not assessed in both populations
network.symptoms <- del.symptoms[!(del.symptoms %in% c('inconsolability', 'delusions'))]
symptom1 <- rep(1:length(del.symptoms), each = length(del.symptoms))
symptom2 <- rep(1:length(del.symptoms), length(del.symptoms))

symptom.pairs <- as.data.frame(cbind(symptom1, symptom2)) %>%
  filter(symptom2 > symptom1) %>%
  mutate(symptom1 = del.symptoms[symptom1],
         symptom2 = del.symptoms[symptom2])

## Function to calculate N, % of all obs in a given data.frame with both symptom1 and symptom2
calc_symptom_npct <- function(s1, s2, df, pop){
  df %>%
    mutate_(has.both = lazyeval::interp(~ as.numeric(x) == 1 &
                                          as.numeric(y) == 1,
                                        x = as.name(s1), y = as.name(s2))) %>%
    summarise(n.both = sum(has.both, na.rm = TRUE),
              pct.both = round(mean(has.both, na.rm = TRUE)*100)) %>%
    mutate(symptom1 = s1, symptom2 = s2, population = pop)
}

## Calculate N, % for each population (geriatric, infants, preschoolers)
dsd.args <- list(s1 = symptom.pairs$symptom1, s2 = symptom.pairs$symptom2,
                 df = list(dsd.long),
                 pop = 'Geriatric')

infant.args <- list(s1 = symptom.pairs$symptom1, s2 = symptom.pairs$symptom2,
                    df = list(subset(pscam.long, age.grp == "Infant (6-23m)")),
                    pop = "Infant (6-23m)")

preschool.args <- list(s1 = symptom.pairs$symptom1, s2 = symptom.pairs$symptom2,
                       df = list(subset(pscam.long, age.grp == "Preschool (24-48m)")),
                       pop = "Preschool (24-48m)")

data.ggraph <- map_df(list(dsd.args, infant.args, preschool.args),
                      ~ pmap_df(., .f = calc_symptom_npct)) %>%
  filter(symptom1 %in% network.symptoms & symptom2 %in% network.symptoms)

## I want the edges to be pretty fans. I think this means I need one record per observation. Sad.
data.ggraph2 <- map_df(1:nrow(data.ggraph),
                       ~ bind_rows(rep(list(data.ggraph[.,]), data.ggraph[.,'pct.both'])))

data.ggraph2 <- data.ggraph2[,c('symptom1', 'symptom2', 'pct.both', 'n.both', 'population')]
names(data.ggraph2) <- c('from', 'to', 'weight', 'n.both', 'population')

## Create data.frame of vertex info
## Make DSD data logical, not numeric
dsd.long.lgl <- map(network.symptoms, ~ as.tibble(as.logical(dsd.long[, .]))) %>%
  bind_cols()
names(dsd.long.lgl) <- network.symptoms

all.recs <- bind_rows(dsd.long.lgl, pscam.long[,network.symptoms]) %>%
  gather(key = symptom, value = had.symptom) %>%
  group_by(symptom) %>%
  summarise(had.symptom = sum(had.symptom, na.rm = TRUE)) %>%
  ungroup() %>%
  arrange(desc(had.symptom)) %>%
  mutate(name = capitalize(symptom))

gr.data <- graph_from_data_frame(d = data.ggraph2, directed = FALSE, vertices = all.recs)

commonsymp.network <- ggraph(gr.data, layout = 'circle') +
  facet_edges(~ population) +
  geom_edge_fan(aes(colour = from), alpha = 0.1) +
  geom_node_point(aes(size = had.symptom), colour = 'gray50', alpha = 0.5) +
  geom_node_label(aes(label = name),
                  nudge_y = -0.15, size = 3, label.padding = unit(0.1, 'lines'), label.size = 0, alpha = 0.75) +
  scale_edge_color_viridis(end = 0.85) +
  scale_x_continuous(limits = c(-1.2, 1.2)) +
  theme_void() +
  theme(legend.position = 'none',
        strip.text = element_text(hjust = 0.2, face = 'bold', size = 12)) +
  coord_fixed()

pdf(file = 'common_symptoms_network.pdf', width = 10, height = 4)
commonsymp.network
dev.off()

@


\clearpage
\section{Software Details}
\Sexpr{devtools::session_info()$platform$version} was used for all analyses. The following table shows all add-on packages loaded.

<<technical, results = 'asis'>>=
latex(devtools::session_info()$packages, file = '',
      rowname = NULL, label = 'table:software', size = 'footnotesize', where = '!h')
@

\end{document}
